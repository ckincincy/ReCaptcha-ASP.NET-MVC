{"name":"ReCaptcha ASP.NET MVC","tagline":"ReCaptcha ASP.NET MVC version 2.0 wrapper","body":"ReCaptcha-ASP.NET-MVC\r\n=====================\r\n\r\nReCaptcha ASP.NET MVC latest version wrapper\r\n\r\nhttps://www.google.com/recaptcha\r\n\r\n# Install via Nuget\r\n\r\n```\r\nInstall-Package reCaptcha.AspNet.Mvc\r\n```\r\n\r\n# Simple usage\r\n\r\n### 1) Get Google reCAPTCHA at https://www.google.com/recaptcha\r\n\r\n### 2) Add Site key and Secret key to your Web.config\r\n\r\n```xml\r\n<add key=\"ReCaptcha:SiteKey\" value=\"your-site-key\" />\r\n<add key=\"ReCaptcha:SecretKey\" value=\"your-secret-key\" />\r\n```\r\n\r\n### 3) Add server-side integration to your back-end\r\n\r\n```c#\r\npublic class AccountsController : Controller\r\n{\r\n    [HttpGet]\r\n    public ActionResult Register()\r\n    {\r\n        ViewBag.Recaptcha = ReCaptcha.GetHtml(ConfigurationManager.AppSettings[\"ReCaptcha:SiteKey\"]);\r\n\r\n        return View();\r\n    }\r\n\r\n    [HttpPost]\r\n    [ValidateAntiForgeryToken]\r\n    public ActionResult Register(RegisterMerchantViewModel request)\r\n    {\r\n        try\r\n        {\r\n            if (ModelState.IsValid && ReCaptcha.Validate(ConfigurationManager.AppSettings[\"ReCaptcha:SecretKey\"]))\r\n            {\r\n                // Do what you need\r\n\r\n                return View(\"RegisterConfirmation\");\r\n            }\r\n\r\n            ViewBag.RecaptchaLastErrors = ReCaptcha.GetLastErrors(this.HttpContext);\r\n            \r\n            ViewBag.publicKey = ConfigurationManager.AppSettings[\"ReCaptcha:SiteKey\"];\r\n\r\n            return View(request);\r\n        }\r\n        catch (Exception)\r\n        {\r\n            return new HttpStatusCodeResult(HttpStatusCode.InternalServerError);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### 4) Add client-side integration to your front-end\r\n\r\nAdd the following code to your ``Views/Merchants/Register.cshtml``:\r\n\r\n```c#\r\n@ReCaptcha.GetHtml(@ViewBag.publicKey)\r\n            \r\n@if (ViewBag.RecaptchaLastErrors != null)\r\n{\r\n    <div>Oops! Invalid reCAPTCHA =(</div>\r\n}\r\n```\r\n\r\n## Done!\r\n\r\n\r\n## Usage\r\n\r\n### `@ReCaptcha.GetHtml(...)`\r\n\r\nLet's talk more about the most basic way to get started:\r\n\r\n``` razor\r\n@ReCaptcha.GetHtml(\"site-key\")\r\n```\r\n\r\n#### Arguments\r\n\r\nThe synopsis for the `@ReCaptcha.GetHtml` function is:\r\n\r\n``` razor\r\n@ReCaptcha.GetHtml(publicKey, [theme], [type], [callback], [lang])\r\n```\r\n\r\n##### ReCaptcha Parameter [reCaptcha doc](https://developers.google.com/recaptcha/docs/display) \r\n\r\nkey | value | default | description\r\n----|-------|---------|------------\r\n`publicKey` | | | Your sitekey.\r\n`theme` | dark/light | light | Optional. The color theme of the widget.\r\n`type` | audio/image | image | Optional. The type of CAPTCHA to serve.\r\n`callback` |  |  | Optional. Your callback function that's executed when the user submits a successful CAPTCHA response. The user's response, g-recaptcha-response, will be the input for your callback function.\r\n`lang` | See [language codes](https://developers.google.com/recaptcha/docs/language) | | Optional. Forces the widget to render in a specific language. Auto-detects the user's language if unspecified.\r\n\r\n### `@ReCaptcha.Validate(privateKey)`\r\n\r\nsee [recaptcha doc](https://developers.google.com/recaptcha/docs/verify)\r\n\r\nreturns true for valid response from user, false otherwise.\r\n\r\n##### ReCaptcha Parameter\r\n\r\nprivateKey 'Secret key' is Required. The shared key between your site and ReCAPTCHA.\r\n\r\n### `@ReCaptcha.GetLastErrors(HttpContextBase context)`\r\n\r\nsee [recaptcha doc](https://developers.google.com/recaptcha/docs/verify#error-code-reference)\r\n\r\nreturns a `IEnumerable<reCaptcha.ErrorCodes>`. \r\nif returns null the no errors occurred. \r\n\r\n##### ReCaptcha Parameter\r\n\r\ncontext is your HttpContenxt e.g. `this.HttpContext`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}